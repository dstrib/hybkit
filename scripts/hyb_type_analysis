#!/usr/bin/env python3
# Daniel B. Stribling
# Renne Lab, University of Florida
# Hybkit Project : http://www.github.com/RenneLab/hybkit

"""
Perform a type analysis on one or more prepared '.hyb' format files.

The required preparation steps for this analysis include adding the segtype flags,
as can be performed with ``hyb_analysis -t segtype``.
"""

import sys
import os 
import argparse
import textwrap
import hybkit

# Import module-level dunder-names:
from hybkit.__about__ import __author__, __contact__, __credits__, __date__, __deprecated__, \
                             __email__, __license__, __maintainer__, __status__, __version__

# Divide docstring into argparse and full portions.
argparse_doc = __doc__ + '\nFor full script description and usage, see the hybkit documentation.'
__doc__ += textwrap.dedent("""
    
    This analysis finds counts the number of segment type combinations 
    occurring in the records, such as "miRNA-mRNA", "miRNA-lncRNA", etc.

    Additionally, counts are performed of the total number of segments assigned among 
    all halves as a simple tally.

    Output for both analyses are provided as csv files and as a pie chart created 
    by matplotlib. For an example of the output, see the documentation for the 
    :ref:`Example Summary Analysis`. 

    Add Example system calls:
        ::
            
            hyb_analysis -t mirna -i my_file_1.hyb

            hyb_analysis -t mirna -i my_file_1.hyb \\
                         --mirna_types miRNA kshv_miRNA

    """)

__doc__ += hybkit.util.output_description

# Create Command-line Argument Parser
def make_parser():
    script_args = argparse.ArgumentParser(add_help=False)
    parser_components = [
                         hybkit.util.in_hybs_parser,
                         hybkit.util.out_opts_parser,
                         hybkit.util.hyb_type_analysis_parser,
                         hybkit.util.gen_opts_parser,
                         hybkit.util.hybrecord_parser,
                         hybkit.util.hybfile_parser,
                        ]
    script_parser = argparse.ArgumentParser(
         parents=parser_components,
         description=argparse_doc.replace('|', '').replace('``', ''),
         formatter_class=argparse.ArgumentDefaultsHelpFormatter,
         allow_abbrev=False,
         )

    # script_parser.set_defaults(out_suffix=hybkit.util.ANALYSIS_OUT_SUFFIX)

    return script_parser

# Define main script function.
def hyb_type_analysis(in_hyb_files,
                      out_dir='.', 
                      out_suffix='',
                      out_hyb_files=None,
                      count_mode=hybkit.HybRecord.DEFAULTS['count_mode'],
                      verbose=False, silent=False):
    """Perform main script function."""

    if not silent:
        print('\nPerforming Type Analysis of Hyb Files...')
   
    for in_hyb_file in in_hyb_files:
        file_basename = os.path.basename(in_hyb_file)
        if out_hyb_files is not None:
            out_hyb_file = out_hyb_files[i]
        else:
            out_basename = hybkit.util.make_out_file_name(in_hyb_file,
                                                          name_suffix=out_suffix,
                                                          in_suffix='.hyb',
                                                          out_suffix='.hyb',
                                                          out_dir=out_dir,
                                                          seg_sep='_',
                                                          remove_out_suffix=True,)

        if verbose:
            print('Analyzing File:\n    ' + in_hyb_file)
            print('    Output Basename: ' + out_hyb_file)
    
        with hybkit.HybFile.open(in_hyb_file, 'r') as in_hyb):
            analysis_dict = hybkit.analysis.type_dict()
            for record in in_hyb:
                if not record.has_property('has_seg_types'):
                    message = 'ERROR: Record %s does not have segtypes.\n' % str(record)
                    message += 'Please prepare files using the hyb_analysis -t segtype.'
                    print(message)
                    raise Exception(message) 
                
                hybkit.analysis.addto_type(record, analysis_dict, count_mode=count_mode)

                if do_mirna:
                    record.mirna_analysis(mirna_types)
     
                if do_target_region:
                    pass

                out_hyb.write_record(record)

    if verbose:
        print('\nAnalysis Complete.\n')


# Execute the script function
if __name__ == '__main__':
    script_parser = make_parser()
    args = script_parser.parse_args() 
    hybkit.util.validate_args(args, script_parser)
    hybkit.HybRecord.set_namespace_settings(args, verbose=args.verbose)
    hybkit.HybFile.set_namespace_settings(args, verbose=args.verbose)
    hyb_type_analysis(
                      args.in_hyb, 
                      out_dir=args.out_dir,
                      out_suffix=args.out_suffix,
                      out_hyb_files=args.out_hyb,
                      count_mode='record',
                      verbose=args.verbose,
                      silent=args.silent,
                     )

